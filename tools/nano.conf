FREEBSD_VERSION=8
NANO_NAME=lacuna
NANO_IMAGES=2
#NANO_CODESIZE=`expr 128 \* 2048`
NANO_CONFSIZE=`expr 2 \* 2048`
#NANO_DATASIZE=-1
NANO_BOOT2CFG="-h -S19200"
#NANO_BOOT2CFG="-P"
#NANO_BOOTLOADER="boot/boot0"
#NANO_PMAKE="make" uncomment to disable parallel make

NANO_RAM_TMPVARSIZE=`expr 10 \* 2048`

NANO_GEM_OPTS="--no-rdoc --no-ri"
export RUBY_DEFAULT_VER=1.9

if [ -f $LACUNA_TOOLS/build.$FREEBSD_VERSION/EMBEDDED ]; then
	echo "# Using kernel file ($LACUNA_TOOLS/build.$FREEBSD_VERSION/EMBEDDED)"
  NANO_KERNEL=$LACUNA_TOOLS/build.$FREEBSD_VERSION/EMBEDDED
fi
if [ -f $LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.world ]; then
	echo "# Using world file ($LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.world)"
	CONF_WORLD=`cat $LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.world`
fi
if [ -f $LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.build ]; then
	echo "# Using build file ($LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.build)"
	CONF_BUILD=`cat $LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.build`
fi
if [ -f $LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.install ]; then
	echo "# Using install file ($LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.install)"
	CONF_INSTALL=`cat $LACUNA_TOOLS/build.$FREEBSD_VERSION/src.conf.install`
fi

#FlashDevice SanDisk 512mb
NANO_MEDIASIZE=960512
NANO_HEADS=64
NANO_SECTS=32
#NANO_MEDIASIZE=7847280
#NANO_HEADS=255
#NANO_SECTS=63


if [ -f $LACUNA_TOOLS/build.$FREEBSD_VERSION/Pkglist ]; then
	echo "# Using pkglist ($LACUNA_TOOLS/build.$FREEBSD_VERSION/Pkglist)"
  cust_download_pkg () (
		if $do_world ; then
			rm $NANO_PACKAGE_DIR/*
		else
			pprint 2 "Using existing packages"
		fi
    NANO_PACKAGE_DIR=$NANO_PACKAGE_DIR ruby19 -I $LACUNA_TOOLS/lib -rpackager $LACUNA_TOOLS/build.$FREEBSD_VERSION/Pkglist
  )
  customize_cmd cust_download_pkg
  customize_cmd cust_pkg
fi

customize_cmd cust_install_files

cust_install_machine_files () (
	cd ${LACUNA_TOOLS}/Files
	find . -print | grep -Ev '/(CVS|\.svn|\.git)' | cpio -dumpv ${NANO_WORLDDIR}
)
customize_cmd cust_install_machine_files

cust_install_lacuna() (
  #Copy lacuna code to 
  cp -R $LACUNA_SRC $NANO_WORLDDIR/usr/lacuna
  
  #Package gems and convert them to native binary packages
  (
    cd $NANO_WORLDDIR/usr/lacuna
    bundle package
    cd vendor/cache
    gembuilder -s *
  )
  
  #Install a resolv.conf
  if [ -f ${NANO_WORLDDIR}/etc/resolv.conf ]; then
    mv ${NANO_WORLDDIR}/etc/resolv.conf ${NANO_WORLDDIR}/etc/resolv.conf.old
  fi
  cp /etc/resolv.conf ${NANO_WORLDDIR}/etc/resolv.conf
  
  #Update rubygems
  gem19 update --system
  chroot $NANO_WORLDDIR sh -c 'gem19 update --system'
  
  #Install bundler
  chroot $NANO_WORLDDIR sh -c 'gem19 install bundler'
  
  #Install gems
  chroot $NANO_WORLDDIR sh -c 'cd /usr/lacuna ; bundle install --local --binstubs'

  rm -rf $NANO_WORLDDIR/usr/lacuna/vendor/cache

  #Restore old resolv.conf
  rm $NANO_WORLDDIR/etc/resolv.conf
  if [ -f $NANO_WORLDDIR/etc/resolv.conf.old ]; then
    mv $NANO_WORLDDIR/etc/resolv.conf.old $NANO_WORLDDIR/etc/resolv.conf
  fi
)
customize_cmd cust_install_lacuna

cust_maildirmake_skel() (
  chroot $NANO_WORLDDIR sh -c 'maildirmake /usr/share/skel/Maildir'
)
late_customize_cmd cust_maildirmake_skel

cust_create_admin_user() (
  chroot $NANO_WORLDDIR sh -c 'echo -n "lacuna" | pw useradd admin -c "Administrator" -h 0 -m'
  chroot $NANO_WORLDDIR sh -c 'su -m admin -c "maildirmake /var/home/admin/Maildir"'
  #echo 'root: admin' >> $NANO_WORLDDIR/etc/aliases
  chroot $NANO_WORLDDIR sh -c 'echo -n "*" | pw usermod root -H 0 -s /usr/local/bin/bash'
)
customize_cmd cust_create_admin_user

#customize_cmd cust_comconsole

cust_remove_static_library () (
	cd ${NANO_WORLDDIR}
	find . -name *.la -exec rm \{\} \;
	find . -name *.a -exec rm \{\} \;
)
customize_cmd cust_remove_static_library

cust_nobeastie() (
    touch ${NANO_WORLDDIR}/boot/loader.conf
    echo "beastie_disable=\"YES\"" >> ${NANO_WORLDDIR}/boot/loader.conf
)
#customize_cmd cust_nobeastie

cust_autologin_console	() (
    # Enable autologin on console
    sed -i "" -e /ttyu0/s/std/al/ ${NANO_WORLDDIR}/etc/ttys
)
customize_cmd cust_autologin_console
